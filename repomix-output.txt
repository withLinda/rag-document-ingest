This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-09T14:34:29.548Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/api/config.ts
src/api/ingest.ts
src/api/search.ts
src/api/types.ts
src/App.css
src/App.tsx
src/assets/react.svg
src/components/DocumentIngest.tsx
src/components/DocumentSearch.tsx
src/index.css
src/main.tsx
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "rag-app-dev",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: src/api/config.ts
================
export const api = {
    key: import.meta.env.VITE_RAGAAS_API_KEY,
    // Remove the full URL and just use the path
    baseUrl: '/v1', // Changed from 'https://api.ragaas.dev/v1'
    namespaceId: import.meta.env.VITE_NAMESPACE_ID,
  } as const

================
File: src/api/ingest.ts
================
import { api } from './config'
import type { IngestResponse, IngestStatus } from './types'

// Main ingestion function
export async function ingestDocument(text: string): Promise<IngestResponse> {
  try {
    // Enhanced request body with chunk configuration
    const response = await fetch(`${api.baseUrl}/ingest/text`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${api.key}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        namespaceId: api.namespaceId,
        ingestConfig: {
          source: 'TEXT',
          config: {
            text,
            metadata: {
              source: 'pricing-docs',
              category: 'enterprise',
              last_updated: '2024-01',
            },
            // Added chunk configuration
            chunkConfig: {
              chunkSize: 500,    // Process text in 500-token chunks
              chunkOverlap: 50   // 50-token overlap between chunks
            }
          },
        },
      }),
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => null)
      throw new Error(
        `Ingest failed: ${response.status} ${
          errorData ? JSON.stringify(errorData) : response.statusText
        }`
      )
    }

    const ingestResponse = await response.json()
    
    // After getting initial response, wait for processing completion
    await waitForCompletion(
      ingestResponse.data.ingestJobRunId,
      (status) => console.log(`Processing status: ${status}`)
    )

    return ingestResponse
  } catch (error) {
    console.error('Ingest error details:', error)
    throw error
  }
}

// Check the status of an ingestion job
export async function checkIngestStatus(jobId: string): Promise<IngestStatus> {
  try {
    const response = await fetch(
      `${api.baseUrl}/ingest-job-runs/${jobId}?namespaceId=${api.namespaceId}`,
      {
        headers: {
          Authorization: `Bearer ${api.key}`,
        },
      }
    )

    if (!response.ok) {
      const errorData = await response.json().catch(() => null)
      throw new Error(
        `Status check failed: ${response.status} ${
          errorData ? JSON.stringify(errorData) : response.statusText
        }`
      )
    }

    return response.json()
  } catch (error) {
    console.error('Status check error details:', error)
    throw error
  }
}

// Enhanced waitForCompletion with better status handling and timeouts
export async function waitForCompletion(
  jobId: string,
  onStatusUpdate?: (status: string) => void
): Promise<void> {
  let attempts = 0
  const maxAttempts = 30  // 30 attempts with 1-second delay = 30 seconds max
  const delayMs = 1000    // 1 second delay between checks

  while (attempts < maxAttempts) {
    const status = await checkIngestStatus(jobId)
    onStatusUpdate?.(status.data.status)

    switch (status.data.status) {
      case 'COMPLETED':
        console.log('Document processing completed successfully')
        // Add additional delay after completion for indexing
        await new Promise(resolve => setTimeout(resolve, 5000))
        return
      case 'FAILED':
        throw new Error(`Ingestion failed: ${status.data.error || 'Unknown error'}`)
      case 'PROCESSING':
      case 'PENDING':
        // Continue waiting
        break
      default:
        console.warn(`Unknown status received: ${status.data.status}`)
    }

    attempts++
    await new Promise(resolve => setTimeout(resolve, delayMs))
  }

  throw new Error('Operation timed out: Document processing took too long')
}

// Utility function to verify complete ingestion status
export async function verifyIngestion(jobId: string): Promise<boolean> {
  try {
    const status = await checkIngestStatus(jobId)
    return status.data.status === 'COMPLETED'
  } catch (error) {
    console.error('Verification failed:', error)
    return false
  }
}

================
File: src/api/search.ts
================
import { api } from './config'
import type { SearchRequest, SearchResponse } from './types'

export async function searchDocuments(params: SearchRequest): Promise<SearchResponse> {
  try {
    // Simplified request body with exact parameter names
    const requestBody = {
      query: params.query,          // Changed from 'query' to 'text'
      namespaceId: params.namespaceId,
      topK: 10,
      minScore: 0.0,              // Changed from scoreThreshold to minScore and lowered to 0
      // Removed all filters for testing
    }

    console.log('Search Request:', JSON.stringify(requestBody, null, 2))

    const response = await fetch(`${api.baseUrl}/search`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${api.key}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    })

    console.log('Response status:', response.status, response.statusText)
    const responseData = await response.json()
    console.log('Search Response:', JSON.stringify(responseData, null, 2))

    if (!response.ok) {
      throw new Error(`Search failed: ${response.status} ${JSON.stringify(responseData)}`)
    }

    return responseData
  } catch (error) {
    console.error('Search error details:', error)
    throw error
  }
}

================
File: src/api/types.ts
================
// src/api/types.ts

// Ingest Types
export interface IngestConfig {
    source: 'TEXT'
    config: {
      text: string
      metadata: {
        source: string
        category: string
        last_updated: string
        [key: string]: string  // Allow additional metadata fields
      }
    }
  }
  
  export interface IngestResponse {
    success: boolean
    data: {
      ingestJobRunId: string
    }
  }
  
  export interface IngestStatus {
    success: boolean
    data: {
      status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED'
      error?: string
    }
  }
  
  // Search Types
  export interface SearchFilter {
    metadata?: Record<string, string>
  }
  
  export interface SearchRequest {
    query: string
    namespaceId: string
    topK?: number
    minScore?: number
    filter?: SearchFilter
  }
  
  export interface SearchResult {
    content: string
    score: number
    metadata?: Record<string, string>
  }
  
  export interface SearchResponse {
    success: boolean
    data: {
      results: SearchResult[]
    }
    error?: {
      message: string
      code: string
    }
  }

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
import { DocumentIngest } from './components/DocumentIngest'
import { DocumentSearch } from './components/DocumentSearch'

function App() {
  return (
    <div style={{ 
      minHeight: '100vh',
      backgroundColor: '#f8f9fa',
      padding: '20px'
    }}>
      <div style={{
        maxWidth: '800px',
        margin: '0 auto',
      }}>
        <h1 style={{ 
          marginBottom: '30px',
          color: '#1e293b'
        }}>
          RAG Document Search
        </h1>

        <DocumentIngest />
        <DocumentSearch />
      </div>
    </div>
  )
}

export default App

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/DocumentIngest.tsx
================
import { useState } from 'react'
import { ingestDocument, waitForCompletion } from '../api/ingest'

export function DocumentIngest() {
  const [status, setStatus] = useState<string>('')
  const [error, setError] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [ingestResponse, setIngestResponse] = useState<any>(null) // Store the complete response

  const sampleText = `Our Enterprise plan includes advanced security features for large organizations. Key features:

1. Single Sign-On (SSO): Integrate with your existing identity provider (Okta, Azure AD, etc.) for seamless access control.

2. Role-Based Access: Granular permissions let you control who can view, edit, or manage different parts of the system.

3. Audit Logging: Track all system activities with detailed logs for compliance and security monitoring.

4. Custom SLAs: Get guaranteed 99.9% uptime with 24/7 priority support.`

  const handleIngest = async () => {
    setIsProcessing(true)
    setError(null)
    setStatus('Starting ingestion...')
    setIngestResponse(null)

    try {
      const content = await ingestDocument(sampleText)
      console.log('Initial ingest response:', content)
      setIngestResponse(content)
      setStatus(`Document submitted with ID: ${content.data.ingestJobRunId}`)

      await waitForCompletion(content.data.ingestJobRunId, (currentStatus) => {
        setStatus(`Processing: ${currentStatus}`)
        console.log('Current status:', currentStatus)
      })

      setStatus('✅ Document processed successfully!')
    } catch (err) {
      console.error('Ingest error:', err)
      setError(err instanceof Error ? err.message : 'An unexpected error occurred')
      setStatus('❌ Processing failed')
    } finally {
      setIsProcessing(false)
    }
  }

  return (
    <div style={{ 
      padding: '20px',
      backgroundColor: '#ffffff',
      borderRadius: '8px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    }}>
      <h2 style={{ marginTop: 0 }}>Document Ingestion</h2>
      
      <div style={{ 
        backgroundColor: '#f8fafc',
        padding: '15px',
        borderRadius: '8px',
        marginBottom: '20px',
        border: '1px solid #e2e8f0'
      }}>
        <h3 style={{ margin: '0 0 10px 0', fontSize: '16px' }}>Sample Text to Ingest:</h3>
        <pre style={{ 
          margin: 0,
          whiteSpace: 'pre-wrap',
          fontSize: '14px',
          color: '#334155'
        }}>
          {sampleText}
        </pre>
      </div>

      <button
        onClick={handleIngest}
        disabled={isProcessing}
        style={{
          padding: '10px 20px',
          fontSize: '16px',
          backgroundColor: isProcessing ? '#94a3b8' : '#0070f3',
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: isProcessing ? 'wait' : 'pointer'
        }}
      >
        {isProcessing ? 'Processing...' : 'Ingest Document'}
      </button>

      {status && (
        <div style={{
          marginTop: '20px',
          padding: '10px',
          backgroundColor: status.includes('✅') ? '#f0fdf4' : '#f8fafc',
          borderRadius: '5px',
          border: '1px solid #e2e8f0',
          color: status.includes('✅') ? '#047857' : '#1e293b'
        }}>
          <strong>Status:</strong> {status}
        </div>
      )}

      {error && (
        <div style={{
          marginTop: '20px',
          padding: '10px',
          backgroundColor: '#fef2f2',
          borderRadius: '5px',
          color: '#dc2626',
          border: '1px solid #fecaca'
        }}>
          <strong>Error:</strong> {error}
        </div>
      )}

      {/* Display the complete ingest response */}
      {ingestResponse && (
        <div style={{
          marginTop: '20px',
          padding: '15px',
          backgroundColor: '#f8fafc',
          borderRadius: '8px',
          border: '1px solid #e2e8f0'
        }}>
          <h3 style={{ 
            margin: '0 0 10px 0',
            fontSize: '16px'
          }}>
            Ingest Response
          </h3>
          <pre style={{ 
            margin: 0,
            whiteSpace: 'pre-wrap',
            fontSize: '14px',
            color: '#334155',
            backgroundColor: '#ffffff',
            padding: '10px',
            borderRadius: '4px',
            border: '1px solid #e2e8f0'
          }}>
            {JSON.stringify(ingestResponse, null, 2)}
          </pre>
        </div>
      )}
    </div>
  )
}

================
File: src/components/DocumentSearch.tsx
================
import { useState, useCallback } from 'react'
import { searchDocuments } from '../api/search'
import type { SearchResult } from '../api/types'

export function DocumentSearch() {
  const [query, setQuery] = useState('')
  const [results, setResults] = useState<SearchResult[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [debugInfo, setDebugInfo] = useState<any>(null)

  const testQueries = [
    "security features",
    "SSO",
    "enterprise",
    "access control",
    "audit logging"
  ]

  const handleSearch = useCallback(async (searchQuery: string) => {
    setIsSearching(true)
    setError(null)
    setDebugInfo(null)
    
    try {
      const response = await searchDocuments({
        query: searchQuery,
        namespaceId: import.meta.env.VITE_NAMESPACE_ID,
      })

      setDebugInfo(response)
      setResults(response.data.results)
      
      if (response.data.results.length === 0) {
        setError('No results found for: ' + searchQuery)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred')
      setResults([])
    } finally {
      setIsSearching(false)
    }
  }, [])

  return (
    <div style={{ 
      padding: '20px',
      backgroundColor: '#ffffff',
      borderRadius: '8px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      marginTop: '20px'
    }}>
      <h2 style={{ marginTop: 0 }}>Search Documents</h2>
      
      {/* Custom search */}
      <div style={{ 
        display: 'flex',
        gap: '10px',
        marginBottom: '20px'
      }}>
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSearch(query)}
          placeholder="Enter your search query"
          style={{
            flex: 1,
            padding: '10px',
            fontSize: '16px',
            borderRadius: '4px',
            border: '1px solid #e2e8f0',
          }}
        />
        
        <button
          onClick={() => handleSearch(query)}
          disabled={isSearching}
          style={{
            padding: '10px 20px',
            fontSize: '16px',
            backgroundColor: isSearching ? '#94a3b8' : '#0070f3',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: isSearching ? 'wait' : 'pointer',
          }}
        >
          {isSearching ? 'Searching...' : 'Search'}
        </button>
      </div>

      {/* Test queries */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#f8fafc',
        borderRadius: '8px',
        border: '1px solid #e2e8f0'
      }}>
        <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>Test Queries:</div>
        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
          {testQueries.map((testQuery) => (
            <button
              key={testQuery}
              onClick={() => handleSearch(testQuery)}
              style={{
                padding: '8px 16px',
                fontSize: '14px',
                backgroundColor: '#fff',
                color: '#0070f3',
                border: '1px solid #0070f3',
                borderRadius: '4px',
                cursor: 'pointer',
                transition: 'background-color 0.2s'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.backgroundColor = '#f0f9ff'
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.backgroundColor = '#fff'
              }}
            >
              {testQuery}
            </button>
          ))}
        </div>
      </div>

      {error && (
        <div style={{
          padding: '10px',
          backgroundColor: '#fef2f2',
          color: '#dc2626',
          borderRadius: '4px',
          marginBottom: '20px',
          whiteSpace: 'pre-line'
        }}>
          {error}
        </div>
      )}

      {/* Search Results Section */}
      {results.length > 0 && (
        <div style={{ marginTop: '20px' }}>
          <h3 style={{ color: '#0f172a', marginBottom: '15px' }}>Search Results</h3>
          {results.map((result, index) => (
            <div
              key={index}
              style={{
                padding: '15px',
                backgroundColor: '#f8fafc',
                borderRadius: '8px',
                marginBottom: '10px',
                border: '1px solid #e2e8f0',
              }}
            >
              <div style={{ 
                marginBottom: '10px',
                color: '#1e293b',
                whiteSpace: 'pre-wrap'
              }}>
                {result.content}
              </div>
              <div style={{
                display: 'flex',
                gap: '10px',
                fontSize: '14px',
                color: '#64748b'
              }}>
                <span>
                  Score: {(result.score * 100).toFixed(1)}%
                </span>
                {result.metadata && Object.entries(result.metadata).map(([key, value]) => (
                  <span key={key}>
                    {key}: {value}
                  </span>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {debugInfo && (
        <div style={{
          marginTop: '20px',
          padding: '15px',
          backgroundColor: '#f8fafc',
          borderRadius: '8px',
          border: '1px solid #e2e8f0',
        }}>
          <h3 style={{ 
            margin: '0 0 10px 0',
            color: '#1e293b',
            fontSize: '16px'
          }}>
            API Response
          </h3>
          <pre style={{ 
            margin: 0,
            whiteSpace: 'pre-wrap',
            fontSize: '14px',
            color: '#334155',
            backgroundColor: '#ffffff',
            padding: '10px',
            borderRadius: '4px',
            border: '1px solid #e2e8f0',
            overflow: 'auto'
          }}>
            {JSON.stringify(debugInfo, null, 2)}
          </pre>
        </div>
      )}

      <div style={{
        marginTop: '20px',
        padding: '10px',
        backgroundColor: '#f8fafc',
        borderRadius: '4px',
        fontSize: '14px',
        color: '#64748b',
      }}>
        <div>Debug Info:</div>
        <div>Namespace ID: {import.meta.env.VITE_NAMESPACE_ID}</div>
        <div>Request Parameters:</div>
        <pre style={{ margin: '5px 0' }}>
          {JSON.stringify({
            query: query || '[Click a test query]',
            namespaceId: import.meta.env.VITE_NAMESPACE_ID,
            topK: 10,
            minScore: 0.0
          }, null, 2)}
        </pre>
      </div>
    </div>
  )
}

================
File: src/index.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
    readonly VITE_RAGAAS_API_KEY: string
    readonly VITE_NAMESPACE_ID: string
  }
  
  interface ImportMeta {
    readonly env: ImportMetaEnv
  }

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      // Proxy all requests to /v1 to the RAGaaS API
      '/v1': {
        target: 'https://api.ragaas.dev',
        changeOrigin: true,
        secure: false,
        headers: {
          'Access-Control-Allow-Origin': '*'
        }
      }
    }
  }
})
